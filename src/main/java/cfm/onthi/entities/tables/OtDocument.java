/*
 * This file is generated by jOOQ.
 */
package cfm.onthi.entities.tables;


import cfm.onthi.entities.Indexes;
import cfm.onthi.entities.Keys;
import cfm.onthi.entities.SOnthi;
import cfm.onthi.entities.tables.records.OtDocumentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OtDocument extends TableImpl<OtDocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s_onthi.ot_document</code>
     */
    public static final OtDocument OT_DOCUMENT = new OtDocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OtDocumentRecord> getRecordType() {
        return OtDocumentRecord.class;
    }

    /**
     * The column <code>s_onthi.ot_document.ID_DOCUMENT</code>.
     */
    public final TableField<OtDocumentRecord, Long> ID_DOCUMENT = createField(DSL.name("ID_DOCUMENT"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>s_onthi.ot_document.ID_LESSON</code>.
     */
    public final TableField<OtDocumentRecord, Long> ID_LESSON = createField(DSL.name("ID_LESSON"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_document.DOCUMENT_LINK</code>.
     */
    public final TableField<OtDocumentRecord, String> DOCUMENT_LINK = createField(DSL.name("DOCUMENT_LINK"), SQLDataType.VARCHAR(2000).nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_document.SIZE</code>.
     */
    public final TableField<OtDocumentRecord, Double> SIZE = createField(DSL.name("SIZE"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>s_onthi.ot_document.DOCUMENT_NAME</code>.
     */
    public final TableField<OtDocumentRecord, String> DOCUMENT_NAME = createField(DSL.name("DOCUMENT_NAME"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_document.TYPE_DOCUMENT</code>.
     */
    public final TableField<OtDocumentRecord, String> TYPE_DOCUMENT = createField(DSL.name("TYPE_DOCUMENT"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>s_onthi.ot_document.DOWNLOAD_STATUS</code>.
     */
    public final TableField<OtDocumentRecord, Long> DOWNLOAD_STATUS = createField(DSL.name("DOWNLOAD_STATUS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_document.CREATED_DATE</code>.
     */
    public final TableField<OtDocumentRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("CREATED_DATE"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>s_onthi.ot_document.LAST_MODIFIED_BY</code>.
     */
    public final TableField<OtDocumentRecord, String> LAST_MODIFIED_BY = createField(DSL.name("LAST_MODIFIED_BY"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>s_onthi.ot_document.LAST_MODIFIED_DATE</code>.
     */
    public final TableField<OtDocumentRecord, LocalDateTime> LAST_MODIFIED_DATE = createField(DSL.name("LAST_MODIFIED_DATE"), SQLDataType.LOCALDATETIME(6), this, "");

    private OtDocument(Name alias, Table<OtDocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private OtDocument(Name alias, Table<OtDocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s_onthi.ot_document</code> table reference
     */
    public OtDocument(String alias) {
        this(DSL.name(alias), OT_DOCUMENT);
    }

    /**
     * Create an aliased <code>s_onthi.ot_document</code> table reference
     */
    public OtDocument(Name alias) {
        this(alias, OT_DOCUMENT);
    }

    /**
     * Create a <code>s_onthi.ot_document</code> table reference
     */
    public OtDocument() {
        this(DSL.name("ot_document"), null);
    }

    public <O extends Record> OtDocument(Table<O> child, ForeignKey<O, OtDocumentRecord> key) {
        super(child, key, OT_DOCUMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SOnthi.S_ONTHI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.OT_DOCUMENT_ID_LESSON);
    }

    @Override
    public Identity<OtDocumentRecord, Long> getIdentity() {
        return (Identity<OtDocumentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OtDocumentRecord> getPrimaryKey() {
        return Keys.KEY_OT_DOCUMENT_PRIMARY;
    }

    @Override
    public List<ForeignKey<OtDocumentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OT_DOCUMENT_IBFK_1);
    }

    private transient OtLesson _otLesson;

    /**
     * Get the implicit join path to the <code>s_onthi.ot_lesson</code> table.
     */
    public OtLesson otLesson() {
        if (_otLesson == null)
            _otLesson = new OtLesson(this, Keys.OT_DOCUMENT_IBFK_1);

        return _otLesson;
    }

    @Override
    public OtDocument as(String alias) {
        return new OtDocument(DSL.name(alias), this);
    }

    @Override
    public OtDocument as(Name alias) {
        return new OtDocument(alias, this);
    }

    @Override
    public OtDocument as(Table<?> alias) {
        return new OtDocument(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OtDocument rename(String name) {
        return new OtDocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OtDocument rename(Name name) {
        return new OtDocument(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OtDocument rename(Table<?> name) {
        return new OtDocument(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, String, Double, String, String, Long, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super Long, ? super String, ? super Double, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super Long, ? super String, ? super Double, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
