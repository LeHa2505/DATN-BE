/*
 * This file is generated by jOOQ.
 */
package cfm.onthi.entities.tables;


import cfm.onthi.entities.Keys;
import cfm.onthi.entities.SOnthi;
import cfm.onthi.entities.tables.records.OtQuizRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OtQuiz extends TableImpl<OtQuizRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s_onthi.ot_quiz</code>
     */
    public static final OtQuiz OT_QUIZ = new OtQuiz();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OtQuizRecord> getRecordType() {
        return OtQuizRecord.class;
    }

    /**
     * The column <code>s_onthi.ot_quiz.ID_QUIZ</code>.
     */
    public final TableField<OtQuizRecord, Long> ID_QUIZ = createField(DSL.name("ID_QUIZ"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>s_onthi.ot_quiz.ID_EXERCISE</code>.
     */
    public final TableField<OtQuizRecord, Long> ID_EXERCISE = createField(DSL.name("ID_EXERCISE"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_quiz.CONTENT_QUIZ</code>.
     */
    public final TableField<OtQuizRecord, String> CONTENT_QUIZ = createField(DSL.name("CONTENT_QUIZ"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_quiz.OPTIONS</code>.
     */
    public final TableField<OtQuizRecord, String> OPTIONS = createField(DSL.name("OPTIONS"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>s_onthi.ot_quiz.QUIZ_TYPE</code>.
     */
    public final TableField<OtQuizRecord, Long> QUIZ_TYPE = createField(DSL.name("QUIZ_TYPE"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>s_onthi.ot_quiz.ANSWER</code>.
     */
    public final TableField<OtQuizRecord, String> ANSWER = createField(DSL.name("ANSWER"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>s_onthi.ot_quiz.DESCRIPTION</code>.
     */
    public final TableField<OtQuizRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>s_onthi.ot_quiz.QUIZ_STATUS</code>.
     */
    public final TableField<OtQuizRecord, Long> QUIZ_STATUS = createField(DSL.name("QUIZ_STATUS"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>s_onthi.ot_quiz.ORDER</code>.
     */
    public final TableField<OtQuizRecord, Integer> ORDER = createField(DSL.name("ORDER"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>s_onthi.ot_quiz.CREATED_DATE</code>.
     */
    public final TableField<OtQuizRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("CREATED_DATE"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>s_onthi.ot_quiz.LAST_MODIFIED_BY</code>.
     */
    public final TableField<OtQuizRecord, String> LAST_MODIFIED_BY = createField(DSL.name("LAST_MODIFIED_BY"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>s_onthi.ot_quiz.LAST_MODIFIED_DATE</code>.
     */
    public final TableField<OtQuizRecord, LocalDateTime> LAST_MODIFIED_DATE = createField(DSL.name("LAST_MODIFIED_DATE"), SQLDataType.LOCALDATETIME(6), this, "");

    private OtQuiz(Name alias, Table<OtQuizRecord> aliased) {
        this(alias, aliased, null);
    }

    private OtQuiz(Name alias, Table<OtQuizRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s_onthi.ot_quiz</code> table reference
     */
    public OtQuiz(String alias) {
        this(DSL.name(alias), OT_QUIZ);
    }

    /**
     * Create an aliased <code>s_onthi.ot_quiz</code> table reference
     */
    public OtQuiz(Name alias) {
        this(alias, OT_QUIZ);
    }

    /**
     * Create a <code>s_onthi.ot_quiz</code> table reference
     */
    public OtQuiz() {
        this(DSL.name("ot_quiz"), null);
    }

    public <O extends Record> OtQuiz(Table<O> child, ForeignKey<O, OtQuizRecord> key) {
        super(child, key, OT_QUIZ);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SOnthi.S_ONTHI;
    }

    @Override
    public Identity<OtQuizRecord, Long> getIdentity() {
        return (Identity<OtQuizRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OtQuizRecord> getPrimaryKey() {
        return Keys.KEY_OT_QUIZ_PRIMARY;
    }

    @Override
    public OtQuiz as(String alias) {
        return new OtQuiz(DSL.name(alias), this);
    }

    @Override
    public OtQuiz as(Name alias) {
        return new OtQuiz(alias, this);
    }

    @Override
    public OtQuiz as(Table<?> alias) {
        return new OtQuiz(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OtQuiz rename(String name) {
        return new OtQuiz(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OtQuiz rename(Name name) {
        return new OtQuiz(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OtQuiz rename(Table<?> name) {
        return new OtQuiz(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, String, String, Long, String, String, Long, Integer, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super Long, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super Long, ? super Integer, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super Long, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super Long, ? super Integer, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
