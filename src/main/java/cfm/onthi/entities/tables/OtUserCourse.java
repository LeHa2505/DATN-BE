/*
 * This file is generated by jOOQ.
 */
package cfm.onthi.entities.tables;


import cfm.onthi.entities.Indexes;
import cfm.onthi.entities.Keys;
import cfm.onthi.entities.SOnthi;
import cfm.onthi.entities.tables.records.OtUserCourseRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OtUserCourse extends TableImpl<OtUserCourseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s_onthi.ot_user_course</code>
     */
    public static final OtUserCourse OT_USER_COURSE = new OtUserCourse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OtUserCourseRecord> getRecordType() {
        return OtUserCourseRecord.class;
    }

    /**
     * The column <code>s_onthi.ot_user_course.ID_USER_COURSE</code>.
     */
    public final TableField<OtUserCourseRecord, Long> ID_USER_COURSE = createField(DSL.name("ID_USER_COURSE"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>s_onthi.ot_user_course.ID_USER</code>.
     */
    public final TableField<OtUserCourseRecord, Long> ID_USER = createField(DSL.name("ID_USER"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_user_course.ID_COURSE</code>.
     */
    public final TableField<OtUserCourseRecord, Long> ID_COURSE = createField(DSL.name("ID_COURSE"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_user_course.LEARNING_LESSON</code>.
     */
    public final TableField<OtUserCourseRecord, Long> LEARNING_LESSON = createField(DSL.name("LEARNING_LESSON"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>s_onthi.ot_user_course.LEARNED_LESSON</code>.
     */
    public final TableField<OtUserCourseRecord, String> LEARNED_LESSON = createField(DSL.name("LEARNED_LESSON"), SQLDataType.VARCHAR(5000), this, "");

    /**
     * The column <code>s_onthi.ot_user_course.TIME_SCHEDULE</code>.
     */
    public final TableField<OtUserCourseRecord, String> TIME_SCHEDULE = createField(DSL.name("TIME_SCHEDULE"), SQLDataType.VARCHAR(50), this, "");

    private OtUserCourse(Name alias, Table<OtUserCourseRecord> aliased) {
        this(alias, aliased, null);
    }

    private OtUserCourse(Name alias, Table<OtUserCourseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s_onthi.ot_user_course</code> table reference
     */
    public OtUserCourse(String alias) {
        this(DSL.name(alias), OT_USER_COURSE);
    }

    /**
     * Create an aliased <code>s_onthi.ot_user_course</code> table reference
     */
    public OtUserCourse(Name alias) {
        this(alias, OT_USER_COURSE);
    }

    /**
     * Create a <code>s_onthi.ot_user_course</code> table reference
     */
    public OtUserCourse() {
        this(DSL.name("ot_user_course"), null);
    }

    public <O extends Record> OtUserCourse(Table<O> child, ForeignKey<O, OtUserCourseRecord> key) {
        super(child, key, OT_USER_COURSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SOnthi.S_ONTHI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.OT_USER_COURSE_ID_COURSE, Indexes.OT_USER_COURSE_ID_USER);
    }

    @Override
    public Identity<OtUserCourseRecord, Long> getIdentity() {
        return (Identity<OtUserCourseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OtUserCourseRecord> getPrimaryKey() {
        return Keys.KEY_OT_USER_COURSE_PRIMARY;
    }

    @Override
    public List<ForeignKey<OtUserCourseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OT_USER_COURSE_OT_USER_ID_USER_FK, Keys.OT_USER_COURSE_OT_COURSE_ID_COURSE_FK);
    }

    private transient OtUser _otUser;
    private transient OtCourse _otCourse;

    /**
     * Get the implicit join path to the <code>s_onthi.ot_user</code> table.
     */
    public OtUser otUser() {
        if (_otUser == null)
            _otUser = new OtUser(this, Keys.OT_USER_COURSE_OT_USER_ID_USER_FK);

        return _otUser;
    }

    /**
     * Get the implicit join path to the <code>s_onthi.ot_course</code> table.
     */
    public OtCourse otCourse() {
        if (_otCourse == null)
            _otCourse = new OtCourse(this, Keys.OT_USER_COURSE_OT_COURSE_ID_COURSE_FK);

        return _otCourse;
    }

    @Override
    public OtUserCourse as(String alias) {
        return new OtUserCourse(DSL.name(alias), this);
    }

    @Override
    public OtUserCourse as(Name alias) {
        return new OtUserCourse(alias, this);
    }

    @Override
    public OtUserCourse as(Table<?> alias) {
        return new OtUserCourse(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OtUserCourse rename(String name) {
        return new OtUserCourse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OtUserCourse rename(Name name) {
        return new OtUserCourse(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OtUserCourse rename(Table<?> name) {
        return new OtUserCourse(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, Long, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
