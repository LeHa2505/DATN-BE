/*
 * This file is generated by jOOQ.
 */
package cfm.onthi.entities.tables;


import cfm.onthi.entities.Indexes;
import cfm.onthi.entities.Keys;
import cfm.onthi.entities.SOnthi;
import cfm.onthi.entities.tables.records.OtCourseRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OtCourse extends TableImpl<OtCourseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s_onthi.ot_course</code>
     */
    public static final OtCourse OT_COURSE = new OtCourse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OtCourseRecord> getRecordType() {
        return OtCourseRecord.class;
    }

    /**
     * The column <code>s_onthi.ot_course.ID_COURSE</code>.
     */
    public final TableField<OtCourseRecord, Long> ID_COURSE = createField(DSL.name("ID_COURSE"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>s_onthi.ot_course.ID_TEACHER</code>.
     */
    public final TableField<OtCourseRecord, Long> ID_TEACHER = createField(DSL.name("ID_TEACHER"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_course.AVATAR_COURSE</code>.
     */
    public final TableField<OtCourseRecord, String> AVATAR_COURSE = createField(DSL.name("AVATAR_COURSE"), SQLDataType.VARCHAR(5000), this, "");

    /**
     * The column <code>s_onthi.ot_course.CATEGORY_NAME</code>.
     */
    public final TableField<OtCourseRecord, String> CATEGORY_NAME = createField(DSL.name("CATEGORY_NAME"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>s_onthi.ot_course.SCHEDULE</code>.
     */
    public final TableField<OtCourseRecord, Double> SCHEDULE = createField(DSL.name("SCHEDULE"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>s_onthi.ot_course.COURSE_NAME</code>.
     */
    public final TableField<OtCourseRecord, String> COURSE_NAME = createField(DSL.name("COURSE_NAME"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_course.TYPE_COURSE</code>.
     */
    public final TableField<OtCourseRecord, Long> TYPE_COURSE = createField(DSL.name("TYPE_COURSE"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>s_onthi.ot_course.START_DATE</code>.
     */
    public final TableField<OtCourseRecord, LocalDate> START_DATE = createField(DSL.name("START_DATE"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>s_onthi.ot_course.END_DATE</code>.
     */
    public final TableField<OtCourseRecord, LocalDate> END_DATE = createField(DSL.name("END_DATE"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>s_onthi.ot_course.PRICE</code>.
     */
    public final TableField<OtCourseRecord, Double> PRICE = createField(DSL.name("PRICE"), SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_course.DISCOUNT</code>.
     */
    public final TableField<OtCourseRecord, Double> DISCOUNT = createField(DSL.name("DISCOUNT"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>s_onthi.ot_course.DESCRIPTION</code>.
     */
    public final TableField<OtCourseRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>s_onthi.ot_course.CREATED_DATE</code>.
     */
    public final TableField<OtCourseRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("CREATED_DATE"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>s_onthi.ot_course.LAST_MODIFIED_BY</code>.
     */
    public final TableField<OtCourseRecord, String> LAST_MODIFIED_BY = createField(DSL.name("LAST_MODIFIED_BY"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>s_onthi.ot_course.LAST_MODIFIED_DATE</code>.
     */
    public final TableField<OtCourseRecord, LocalDateTime> LAST_MODIFIED_DATE = createField(DSL.name("LAST_MODIFIED_DATE"), SQLDataType.LOCALDATETIME(6), this, "");

    private OtCourse(Name alias, Table<OtCourseRecord> aliased) {
        this(alias, aliased, null);
    }

    private OtCourse(Name alias, Table<OtCourseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s_onthi.ot_course</code> table reference
     */
    public OtCourse(String alias) {
        this(DSL.name(alias), OT_COURSE);
    }

    /**
     * Create an aliased <code>s_onthi.ot_course</code> table reference
     */
    public OtCourse(Name alias) {
        this(alias, OT_COURSE);
    }

    /**
     * Create a <code>s_onthi.ot_course</code> table reference
     */
    public OtCourse() {
        this(DSL.name("ot_course"), null);
    }

    public <O extends Record> OtCourse(Table<O> child, ForeignKey<O, OtCourseRecord> key) {
        super(child, key, OT_COURSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SOnthi.S_ONTHI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.OT_COURSE_ID_TEACHER);
    }

    @Override
    public Identity<OtCourseRecord, Long> getIdentity() {
        return (Identity<OtCourseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OtCourseRecord> getPrimaryKey() {
        return Keys.KEY_OT_COURSE_PRIMARY;
    }

    @Override
    public OtCourse as(String alias) {
        return new OtCourse(DSL.name(alias), this);
    }

    @Override
    public OtCourse as(Name alias) {
        return new OtCourse(alias, this);
    }

    @Override
    public OtCourse as(Table<?> alias) {
        return new OtCourse(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OtCourse rename(String name) {
        return new OtCourse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OtCourse rename(Name name) {
        return new OtCourse(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OtCourse rename(Table<?> name) {
        return new OtCourse(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, Long, String, String, Double, String, Long, LocalDate, LocalDate, Double, Double, String, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super Long, ? super Long, ? super String, ? super String, ? super Double, ? super String, ? super Long, ? super LocalDate, ? super LocalDate, ? super Double, ? super Double, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super Long, ? super Long, ? super String, ? super String, ? super Double, ? super String, ? super Long, ? super LocalDate, ? super LocalDate, ? super Double, ? super Double, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
