/*
 * This file is generated by jOOQ.
 */
package cfm.onthi.entities.tables;


import cfm.onthi.entities.Indexes;
import cfm.onthi.entities.Keys;
import cfm.onthi.entities.SOnthi;
import cfm.onthi.entities.tables.records.OtUserRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function19;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OtUser extends TableImpl<OtUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s_onthi.ot_user</code>
     */
    public static final OtUser OT_USER = new OtUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OtUserRecord> getRecordType() {
        return OtUserRecord.class;
    }

    /**
     * The column <code>s_onthi.ot_user.ID_USER</code>.
     */
    public final TableField<OtUserRecord, Long> ID_USER = createField(DSL.name("ID_USER"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>s_onthi.ot_user.ID_SCHOOL</code>.
     */
    public final TableField<OtUserRecord, Long> ID_SCHOOL = createField(DSL.name("ID_SCHOOL"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>s_onthi.ot_user.TYPE_USER</code>.
     */
    public final TableField<OtUserRecord, Long> TYPE_USER = createField(DSL.name("TYPE_USER"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>s_onthi.ot_user.USERNAME</code>.
     */
    public final TableField<OtUserRecord, String> USERNAME = createField(DSL.name("USERNAME"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_user.PASSWORD</code>.
     */
    public final TableField<OtUserRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.VARCHAR(5000).nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_user.EMAIL</code>.
     */
    public final TableField<OtUserRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_user.PHONE</code>.
     */
    public final TableField<OtUserRecord, String> PHONE = createField(DSL.name("PHONE"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>s_onthi.ot_user.GRADE</code>.
     */
    public final TableField<OtUserRecord, Long> GRADE = createField(DSL.name("GRADE"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>s_onthi.ot_user.GENDER</code>.
     */
    public final TableField<OtUserRecord, Long> GENDER = createField(DSL.name("GENDER"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>s_onthi.ot_user.BOD</code>.
     */
    public final TableField<OtUserRecord, LocalDate> BOD = createField(DSL.name("BOD"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>s_onthi.ot_user.ADDRESS</code>.
     */
    public final TableField<OtUserRecord, String> ADDRESS = createField(DSL.name("ADDRESS"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>s_onthi.ot_user.AVATAR</code>.
     */
    public final TableField<OtUserRecord, String> AVATAR = createField(DSL.name("AVATAR"), SQLDataType.VARCHAR(5000), this, "");

    /**
     * The column <code>s_onthi.ot_user.DESCRIPTION</code>.
     */
    public final TableField<OtUserRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>s_onthi.ot_user.FACEBOOK</code>.
     */
    public final TableField<OtUserRecord, String> FACEBOOK = createField(DSL.name("FACEBOOK"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>s_onthi.ot_user.INSTAGRAM</code>.
     */
    public final TableField<OtUserRecord, String> INSTAGRAM = createField(DSL.name("INSTAGRAM"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>s_onthi.ot_user.ACTIVE</code>.
     */
    public final TableField<OtUserRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>s_onthi.ot_user.CREATED_DATE</code>.
     */
    public final TableField<OtUserRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("CREATED_DATE"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>s_onthi.ot_user.LAST_MODIFIED_BY</code>.
     */
    public final TableField<OtUserRecord, String> LAST_MODIFIED_BY = createField(DSL.name("LAST_MODIFIED_BY"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>s_onthi.ot_user.LAST_MODIFIED_DATE</code>.
     */
    public final TableField<OtUserRecord, LocalDateTime> LAST_MODIFIED_DATE = createField(DSL.name("LAST_MODIFIED_DATE"), SQLDataType.LOCALDATETIME(6), this, "");

    private OtUser(Name alias, Table<OtUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private OtUser(Name alias, Table<OtUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s_onthi.ot_user</code> table reference
     */
    public OtUser(String alias) {
        this(DSL.name(alias), OT_USER);
    }

    /**
     * Create an aliased <code>s_onthi.ot_user</code> table reference
     */
    public OtUser(Name alias) {
        this(alias, OT_USER);
    }

    /**
     * Create a <code>s_onthi.ot_user</code> table reference
     */
    public OtUser() {
        this(DSL.name("ot_user"), null);
    }

    public <O extends Record> OtUser(Table<O> child, ForeignKey<O, OtUserRecord> key) {
        super(child, key, OT_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SOnthi.S_ONTHI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.OT_USER_ID_SCHOOL);
    }

    @Override
    public Identity<OtUserRecord, Long> getIdentity() {
        return (Identity<OtUserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OtUserRecord> getPrimaryKey() {
        return Keys.KEY_OT_USER_PRIMARY;
    }

    @Override
    public List<ForeignKey<OtUserRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OT_USER_IBFK_1);
    }

    private transient OtSchool _otSchool;

    /**
     * Get the implicit join path to the <code>s_onthi.ot_school</code> table.
     */
    public OtSchool otSchool() {
        if (_otSchool == null)
            _otSchool = new OtSchool(this, Keys.OT_USER_IBFK_1);

        return _otSchool;
    }

    @Override
    public OtUser as(String alias) {
        return new OtUser(DSL.name(alias), this);
    }

    @Override
    public OtUser as(Name alias) {
        return new OtUser(alias, this);
    }

    @Override
    public OtUser as(Table<?> alias) {
        return new OtUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OtUser rename(String name) {
        return new OtUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OtUser rename(Name name) {
        return new OtUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OtUser rename(Table<?> name) {
        return new OtUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, Long, Long, String, String, String, String, Long, Long, LocalDate, String, String, String, String, String, Boolean, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super LocalDate, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super LocalDate, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
